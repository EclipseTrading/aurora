<UserControl x:Class="Aurora.SyncfusionDockingContainer.Views.DockingContainer.DockingContainerView"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" 
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:sf="http://schemas.syncfusion.com/wpf"
             xmlns:regions="http://www.codeplex.com/CompositeWPF"
             xmlns:sdc="clr-namespace:Aurora.SyncfusionDockingContainer"
             xmlns:activities="clr-namespace:Aurora.Core.Activities;assembly=Aurora.Core"
             xmlns:i="http://schemas.microsoft.com/expression/2010/interactivity"
             xmlns:dockingContainer="clr-namespace:Aurora.SyncfusionDockingContainer.Views.DockingContainer"
             mc:Ignorable="d" 
             d:DesignHeight="300" d:DesignWidth="300">

    <UserControl.Resources>

        <ResourceDictionary>
            <ResourceDictionary.MergedDictionaries>
                <ResourceDictionary Source="pack://application:,,,/Syncfusion.Tools.Wpf;component/framework/dockingmanager/themes/metrostyle.xaml"/>
                <ResourceDictionary Source="pack://application:,,,/Syncfusion.Tools.Wpf;component/controls/tabcontrolext/themes/metrostyle.xaml"/>
            </ResourceDictionary.MergedDictionaries>

            <DataTemplate x:Key="ViewMenuIcon">
                <Grid HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="26" Margin="0" Height="23">
                    <Rectangle Fill="{Binding RelativeSource={RelativeSource AncestorType=sf:MenuItemAdv}, Path=Background}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"/>
                    <ContentControl Content="{Binding RelativeSource={RelativeSource AncestorType=sf:MenuItemAdv}, Path=Header}"
                                    Foreground="{Binding RelativeSource={RelativeSource AncestorType=sf:MenuItemAdv}, Path=Foreground}"
                                    Margin="0"
                                    HorizontalAlignment="Center" VerticalAlignment="Center" ClipToBounds="False"/>
                </Grid>
            </DataTemplate>

            <DataTemplate x:Key="Menu" DataType="activities:TitleBarSettings">
                <Grid>
                    <ToggleButton AutomationProperties.AutomationId="AutoId_MenuButton" IsChecked="{Binding ElementName=IconPopup, Path=IsOpen}" Width="22" Height="22" Margin="0"
                                  x:Name="ToggleButton"
                                  Background="{Binding Path=InactiveIconBackground}"
                                  Content="{Binding Path=IconContent}">
                        <ToggleButton.Style>
                            <Style TargetType="ToggleButton">
                                <Setter Property="Template">
                                    <Setter.Value>
                                        <ControlTemplate TargetType="ToggleButton">
                                            <Canvas Width="22" Height="22">
                                                <Rectangle x:Name="IconBg" Fill="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Background}" HorizontalAlignment="Stretch" VerticalAlignment="Stretch" Width="23" Height="23"></Rectangle>
                                                <ContentPresenter Content="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Content}"
                                                                  Canvas.Left="2"
                                                                  Canvas.Top="2"
                                                              HorizontalAlignment="Center" VerticalAlignment="Center" />
                                            </Canvas>
                                        </ControlTemplate>
                                    </Setter.Value>
                                </Setter>
                            </Style>
                        </ToggleButton.Style>
                    </ToggleButton>
                    <Popup x:Name="IconPopup" Placement="Bottom" AllowsTransparency="True" PlacementTarget="{Binding ElementName=ImageIcon}" Width="250" PopupAnimation="Fade" StaysOpen="False" VerticalOffset="-1" HorizontalOffset="1">
                        <i:Interaction.Behaviors>
                            <dockingContainer:CloseOnAction/>
                        </i:Interaction.Behaviors>
                        <Border Margin="0,0,8,8" BorderThickness="0">
                            <Border.Effect>
                                <DropShadowEffect BlurRadius="5" Opacity="0.4"/>
                            </Border.Effect>
                            <Grid HorizontalAlignment="Stretch" VerticalAlignment="Stretch">
                                <sf:MenuAdv sf:SkinStorage.VisualStyle="Metro" 
                                            BorderThickness="0" Margin="0" Padding="0" ItemsSource="{Binding Path=MenuItems}" Orientation="Vertical"/>
                            </Grid>
                        </Border>
                    </Popup>
                </Grid>
                <DataTemplate.Triggers>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(sdc:MenuProperties.IsTab)}" Value="True"/>
                            <Condition Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(sdc:MenuProperties.IsSelected)}" Value="False"/>
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="ToggleButton" Property="Background" Value="{Binding Path=InactiveTabIconBackground}"/>
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(sdc:MenuProperties.IsTab)}" Value="True"/>
                            <Condition Binding="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(sdc:MenuProperties.IsActive)}" Value="True"/>
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="ToggleButton" Property="Background" Value="{Binding Path=ActiveIconBackground}"/>
                    </MultiDataTrigger>
                </DataTemplate.Triggers>
            </DataTemplate>

            <ControlTemplate x:Key="DockHeaderPresenterTemplate" TargetType="{x:Type sf:DockHeaderPresenter}">
                <Border x:Name="borderTop" Width="Auto" Height="Auto" BorderThickness="1">
                    <FrameworkElement.ContextMenu>
                        <sf:CustomContextMenu Name="PART_ContextMenu" Focusable="false"/>
                    </FrameworkElement.ContextMenu>
                    <Grid>
                        <DockPanel LastChildFill="true" Height="23">

                            <Grid DockPanel.Dock="Right">
                                <Rectangle Fill="{Binding  Path=(sf:DockingManager.InternalDataContext).(sdc:AuroraProperties.TitleBarSettings).ButtonAreaBackground, RelativeSource={RelativeSource TemplatedParent}}"/>
                                <StackPanel DockPanel.Dock="Right" Orientation="Horizontal">
                                    <ItemsControl ItemsSource="{Binding  Path=(sf:DockingManager.InternalDataContext).(sdc:AuroraProperties.TitleBarSettings).TitleBarControls, RelativeSource={RelativeSource TemplatedParent}}">
                                        <ItemsControl.ItemsPanel>
                                            <ItemsPanelTemplate>
                                                <StackPanel Orientation="Horizontal"/>
                                            </ItemsPanelTemplate>
                                        </ItemsControl.ItemsPanel>
                                    </ItemsControl>
                                    <ToggleButton Name="PART_MinimizeButton" DockPanel.Dock="Right" Focusable="false" VerticalAlignment="Center"
                                                  Visibility="Collapsed" Command="sf:DockHeaderPresenter.MinimizeStateCommand"
                                                  Template="{Binding Path=(sf:DockingManager.DockingManager).(sf:DockingManager.MinimizeButtonTemplate), RelativeSource={RelativeSource TemplatedParent}}">
                                        <FrameworkElement.ToolTip>
                                            <ToolTip Name="PART_MinimizeButtonTooltip">
                                                <TextBlock Name="PART_MinimizeButtonTooltipText" Text="Minimize"/>
                                            </ToolTip>
                                        </FrameworkElement.ToolTip>
                                    </ToggleButton>

                                    <ToggleButton Name="PART_RestoreButton" DockPanel.Dock="Right" Focusable="false" VerticalAlignment="Center"
                                                  Visibility="Collapsed" Command="sf:DockHeaderPresenter.RestoreStateCommand"
                                                  Template="{Binding Path=(sf:DockingManager.DockingManager).(sf:DockingManager.RestoreButtonTemplate), RelativeSource={RelativeSource TemplatedParent}}">
                                        <FrameworkElement.ToolTip>
                                            <ToolTip Name="PART_RestoreButtonTooltip">
                                                <TextBlock Name="PART_RestoreButtonTooltipText" Text="Restore"/>
                                            </ToolTip>
                                        </FrameworkElement.ToolTip>
                                    </ToggleButton>

                                    <ToggleButton Name="PART_MaximizeButton" DockPanel.Dock="Right" Focusable="false" VerticalAlignment="Center"
                                      Visibility="Collapsed" Command="sf:DockHeaderPresenter.MaximizeStateCommand"
                                      Template="{Binding Path=(sf:DockingManager.DockingManager).(sf:DockingManager.MaximizeButtonTemplate), RelativeSource={RelativeSource TemplatedParent}}">
                                        <FrameworkElement.ToolTip>
                                            <ToolTip Name="PART_MaximizeButtonTooltip">
                                                <TextBlock Name="PART_MaximizeButtonTooltipText" Text="Maximize"/>
                                            </ToolTip>
                                        </FrameworkElement.ToolTip>
                                    </ToggleButton>

                                    <ToggleButton Name="PART_ContextMenuButton" Focusable="false" VerticalAlignment="Center"
                                                  AutomationProperties.Name="WindowMenu"
                                                  Command="sf:DockHeaderPresenter.OpenContextMenuCommand"
                                                  IsChecked="{Binding Path=IsContextMenuOpen, RelativeSource={RelativeSource AncestorType={x:Type sf:DockHeaderPresenter}}}"
                                                  Template="{Binding Path=(sf:DockingManager.DockingManager).(sf:DockingManager.MenuButtonTemplate), RelativeSource={RelativeSource TemplatedParent}}">
                                        <FrameworkElement.ToolTip>
                                            <ToolTip Name="PART_ContextMenuButtonTooltip">
                                                <TextBlock Name="PART_ContextMenuButtonTooltipText" Text="Context Menu"/>
                                            </ToolTip>
                                        </FrameworkElement.ToolTip>
                                    </ToggleButton>

                                    <ToggleButton Name="PART_AwlButton" Focusable="false" VerticalAlignment="Center"
                                      AutomationProperties.Name="AutoHide" Command="sf:DockHeaderPresenter.ChangeAwlStateCommand"
                                      Template="{Binding Path=(sf:DockingManager.DockingManager).(sf:DockingManager.AwlButtonTemplate), RelativeSource={RelativeSource TemplatedParent}}">
                                        <FrameworkElement.ToolTip>
                                            <ToolTip Name="PART_AwlButtonTooltip">
                                                <TextBlock Name="PART_AwlButtonTooltipText" Text="Pin View"/>
                                            </ToolTip>
                                        </FrameworkElement.ToolTip>
                                    </ToggleButton>

                                    <ToggleButton Name="PART_CloseButton" Focusable="false" VerticalAlignment="Center" Command="sf:DockHeaderPresenter.CloseCommand" Margin="0,0,0,0"
                                      Template="{Binding Path=(sf:DockingManager.DockingManager).(sf:DockingManager.CloseButtonTemplate), RelativeSource={RelativeSource TemplatedParent}}">
                                        <FrameworkElement.ToolTip>
                                            <ToolTip Name="tooltip">
                                                <TextBlock Name="PART_CloseButtonTooltipText" Text="Close"/>
                                            </ToolTip>
                                        </FrameworkElement.ToolTip>
                                    </ToggleButton>
                                </StackPanel>
                            </Grid>

                            <sf:MenuAdv DockPanel.Dock="Left" sf:WindowChrome.IsHitTestVisibleInChrome="True" sf:SkinStorage.VisualStyle="Metro" BorderThickness="0" Margin="0" Padding="0">
                                <sf:MenuItemAdv BorderThickness="0" 
                                                x:Name="MenuIconButton"
                                                Header="{Binding Path=(sf:DockingManager.InternalDataContext).(sdc:AuroraProperties.TitleBarSettings).IconContent, RelativeSource={RelativeSource TemplatedParent}}"
                                                Padding="0" Margin="-5,0,0,0" VerticalAlignment="Stretch"
                                                ItemsSource="{Binding Path=(sf:DockingManager.InternalDataContext).(sdc:AuroraProperties.TitleBarSettings).MenuItems, RelativeSource={RelativeSource TemplatedParent}}"
                                                HeaderTemplate="{StaticResource ViewMenuIcon}"/>
                            </sf:MenuAdv>

                            <ContentPresenter Name="PART_ContentPresenter" IsHitTestVisible="true" Margin="0, 0, 0, 0" VerticalAlignment="Center"
                                                  MaxHeight="23"
                                              Content="{Binding Path=(sf:DockingManager.InternalDataContext).(sdc:AuroraProperties.TitleBarSettings).HeaderContent, RelativeSource={RelativeSource TemplatedParent}}"
                                              ContentTemplate="{Binding Path=(sf:DockingManager.InternalDataContext).(sdc:AuroraProperties.TitleBarSettings).HeaderTemplate, RelativeSource={RelativeSource TemplatedParent}}"/>
                        </DockPanel>
                        <Border Name="CoverletControl" Visibility="Collapsed" Background="Transparent"/>
                    </Grid>
                </Border>
                <ControlTemplate.Triggers>
                    <DataTrigger Value="false" Binding="{Binding Path=(sf:DockingManager.InternalDataContext).(sf:DockingManager.CanMaximize), RelativeSource={RelativeSource TemplatedParent}}">
                        <Setter TargetName="PART_MaximizeButton" Property="UIElement.Visibility" Value="Collapsed"/>
                        <Setter TargetName="PART_ContextMenu" Property="sf:CustomContextMenu.IsEnabledMaximizeMenuItem" Value="false"/>
                    </DataTrigger>
                    <DataTrigger Value="false" Binding="{Binding Path=(sf:DockingManager.InternalDataContext).(sf:DockingManager.CanMinimize), RelativeSource={RelativeSource TemplatedParent}}">
                        <Setter TargetName="PART_MinimizeButton" Property="UIElement.Visibility" Value="Collapsed"/>
                        <Setter TargetName="PART_ContextMenu" Property="sf:CustomContextMenu.IsEnabledMinimizeMenuItem"
                   Value="false"/>
                    </DataTrigger>
                    <DataTrigger Value="False" Binding="{Binding Path=MaximizeButtonEnabled, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type sf:DockingManager}}}">
                        <Setter TargetName="PART_MaximizeButton" Property="UIElement.Visibility" Value="Collapsed"/>
                        <Setter TargetName="PART_ContextMenu" Property="sf:CustomContextMenu.IsEnabledMaximizeMenuItem"
                   Value="false"/>
                    </DataTrigger>
                    <DataTrigger Value="False" Binding="{Binding Path=MinimizeButtonEnabled, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type sf:DockingManager}}}">
                        <Setter TargetName="PART_MinimizeButton" Property="UIElement.Visibility" Value="Collapsed"/>
                        <Setter TargetName="PART_ContextMenu" Property="sf:CustomContextMenu.IsEnabledMinimizeMenuItem"
                   Value="false"/>
                    </DataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding Path=MaximizeButtonEnabled, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type sf:DockingManager}}}" Value="True"/>
                            <Condition Binding="{Binding Path=(sf:DockingManager.InternalDataContext).(sf:DockingManager.CanMaximize), RelativeSource={RelativeSource TemplatedParent}}" Value="false"/>
                            <Condition Binding="{Binding Path=MaximizeButtonMode, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type sf:DockingManager}}}" Value="Disable"/>
                            <Condition Binding="{Binding Path=(sf:DockingManager.InternalDataContext).(sf:DockingManager.MaximizeButtonVisibility), RelativeSource={RelativeSource TemplatedParent}}" Value="Visible"/>
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="PART_MaximizeButton" Property="UIElement.Visibility" Value="Visible"/>
                        <Setter TargetName="PART_MaximizeButton" Property="UIElement.IsEnabled" Value="false"/>
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding Path=MaximizeButtonEnabled, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type sf:DockingManager}}}" Value="True"/>
                            <Condition Binding="{Binding Path=(sf:DockingManager.InternalDataContext).(sf:DockingManager.CanMaximize), RelativeSource={RelativeSource TemplatedParent}}" Value="true"/>
                            <Condition Binding="{Binding Path=MaximizeButtonMode, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type sf:DockingManager}}}" Value="Disable"/>
                            <Condition Binding="{Binding Path=(sf:DockingManager.InternalDataContext).(sf:DockingManager.MaximizeButtonVisibility), RelativeSource={RelativeSource TemplatedParent}}" Value="Visible"/>
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="PART_MaximizeButton" Property="UIElement.IsEnabled" Value="true"/>
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding Path=MaximizeButtonEnabled, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type sf:DockingManager}}}" Value="True"/>
                            <Condition Binding="{Binding Path=(sf:DockingManager.InternalDataContext).(sf:DockingManager.CanMaximize), RelativeSource={RelativeSource TemplatedParent}}" Value="True"/>
                            <Condition Binding="{Binding Path=(sf:DockingManager.InternalDataContext).(sf:DockingManager.MaximizeButtonVisibility), RelativeSource={RelativeSource TemplatedParent}}" Value="Visible"/>
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="PART_MaximizeButton" Property="UIElement.Visibility" Value="Visible"/>
                        <Setter TargetName="PART_ContextMenu" Property="sf:CustomContextMenu.IsEnabledMaximizeMenuItem"
                   Value="true"/>
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding Path=MinimizeButtonEnabled, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type sf:DockingManager}}}" Value="True"/>
                            <Condition Binding="{Binding Path=(sf:DockingManager.InternalDataContext).(sf:DockingManager.CanMinimize), RelativeSource={RelativeSource TemplatedParent}}" Value="True"/>
                            <Condition Binding="{Binding Path=(sf:DockingManager.InternalDataContext).(sf:DockingManager.MinimizeButtonVisibility), RelativeSource={RelativeSource TemplatedParent}}" Value="Visible"/>
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="PART_MinimizeButton" Property="UIElement.Visibility" Value="Visible"/>
                        <Setter TargetName="PART_ContextMenu" Property="sf:CustomContextMenu.IsEnabledMinimizeMenuItem"
                   Value="true"/>
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding Path=MaximizeButtonEnabled, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type sf:DockingManager}}}" Value="True"/>
                            <Condition Binding="{Binding Path=(sf:DockingManager.InternalDataContext).(sf:DockingManager.CanMaximize), RelativeSource={RelativeSource TemplatedParent}}" Value="True"/>
                            <Condition Binding="{Binding Path=(sf:DockingManager.InternalDataContext).(sf:DockingManager.MaximizeButtonVisibility), RelativeSource={RelativeSource TemplatedParent}}" Value="Collapsed"/>
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="PART_MaximizeButton" Property="UIElement.Visibility" Value="Collapsed"/>
                        <Setter TargetName="PART_ContextMenu" Property="sf:CustomContextMenu.IsEnabledMaximizeMenuItem" Value="false"/>
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding Path=MinimizeButtonEnabled, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type sf:DockingManager}}}" Value="True"/>
                            <Condition Binding="{Binding Path=(sf:DockingManager.InternalDataContext).(sf:DockingManager.CanMinimize), RelativeSource={RelativeSource TemplatedParent}}" Value="True"/>
                            <Condition Binding="{Binding Path=(sf:DockingManager.InternalDataContext).(sf:DockingManager.MinimizeButtonVisibility), RelativeSource={RelativeSource TemplatedParent}}" Value="Collapsed"/>
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="PART_MinimizeButton" Property="UIElement.Visibility" Value="Collapsed"/>
                        <Setter TargetName="PART_ContextMenu" Property="sf:CustomContextMenu.IsEnabledMinimizeMenuItem"
                   Value="false"/>
                    </MultiDataTrigger>
                    <DataTrigger Value="Collapsed"
                      Binding="{Binding Path=(sf:DockingManager.InternalDataContext).(sf:DockingManager.RestoreButtonVisibility), RelativeSource={RelativeSource TemplatedParent}}">
                        <Setter TargetName="PART_RestoreButton" Property="UIElement.Visibility" Value="Collapsed"/>
                    </DataTrigger>
                    <DataTrigger Value="Visible"
                      Binding="{Binding Path=(sf:DockingManager.InternalDataContext).(sf:DockingManager.RestoreButtonVisibility), RelativeSource={RelativeSource TemplatedParent}}">
                        <Setter TargetName="PART_RestoreButton" Property="UIElement.Visibility" Value="Visible"/>
                        <Setter TargetName="PART_MaximizeButton" Property="UIElement.Visibility" Value="Collapsed"/>
                        <Setter TargetName="PART_MaximizeButton" Property="UIElement.IsEnabled" Value="true"/>
                    </DataTrigger>
                    <DataTrigger Value="Float"
                      Binding="{Binding Path=(sf:DockingManager.InternalDataContext).(sf:DockingManager.State), RelativeSource={RelativeSource TemplatedParent}}">
                        <Setter TargetName="PART_AwlButton" Property="UIElement.Visibility" Value="Collapsed"/>
                        <Setter TargetName="PART_ContextMenu" Property="sf:CustomContextMenu.IsEnabledAutoHideMenuItem"
                   Value="false"/>
                    </DataTrigger>
                    <DataTrigger Value="AutoHidden"
                      Binding="{Binding Path=(sf:DockingManager.InternalDataContext).(sf:DockingManager.State), RelativeSource={RelativeSource TemplatedParent}}">
                        <Setter TargetName="PART_AwlButton" Property="UIElement.RenderTransform">
                            <Setter.Value>
                                <RotateTransform Angle="90" CenterX="10" CenterY="10"/>
                            </Setter.Value>
                        </Setter>
                    </DataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding Path=(sf:DockingManager.InternalDataContext).(sf:DockingManager.State), RelativeSource={RelativeSource TemplatedParent}}" Value="AutoHidden"/>
                            <Condition Binding="{Binding Path=IsTouchEnabled, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type sf:DockingManager}}}" Value="True"/>
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="PART_AwlButton" Property="UIElement.RenderTransform">
                            <Setter.Value>
                                <RotateTransform Angle="90" CenterX="17.5" CenterY="17.5"/>
                            </Setter.Value>
                        </Setter>
                    </MultiDataTrigger>
                    <DataTrigger Value="False" Binding="{Binding Path=(sf:DockingManager.InternalDataContext).(sf:DockingManager.CanClose), RelativeSource={RelativeSource TemplatedParent}}">
                        <Setter TargetName="PART_ContextMenu" Property="sf:CustomContextMenu.IsEnabledHiddenMenuItem" Value="false"/>
                        <Setter TargetName="PART_CloseButton" Property="UIElement.Visibility" Value="Collapsed"/>
                    </DataTrigger>
                    <DataTrigger Value="False" Binding="{Binding Path=(sf:DockingManager.InternalDataContext).(sf:DockingManager.CanFloat), RelativeSource={RelativeSource TemplatedParent}}">
                        <Setter TargetName="PART_ContextMenu" Property="sf:CustomContextMenu.IsEnabledFloatingMenuItem"
                   Value="false"/>
                    </DataTrigger>
                    <DataTrigger Value="False" Binding="{Binding Path=(sf:DockingManager.InternalDataContext).(sf:DockingManager.CanDock), RelativeSource={RelativeSource TemplatedParent}}">
                        <Setter TargetName="PART_AwlButton" Property="UIElement.Visibility" Value="Collapsed"/>
                        <Setter TargetName="PART_ContextMenu" Property="sf:CustomContextMenu.IsEnabledAutoHideMenuItem"
                   Value="false"/>
                    </DataTrigger>
                    <DataTrigger Value="False" Binding="{Binding Path=(sf:DockingManager.InternalDataContext).(sf:DockingManager.CanDocument), RelativeSource={RelativeSource TemplatedParent}}">
                        <Setter TargetName="PART_ContextMenu" Property="sf:CustomContextMenu.IsEnabledTabbedMenuItem"
                   Value="false"/>
                    </DataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding Path=(sf:DockingManager.InternalDataContext).(sf:DockedElementTabbedHost.ShowTabs), RelativeSource={RelativeSource TemplatedParent}}" Value="False"/>
                            <Condition Binding="{Binding Path=(sf:DockingManager.InternalDataContext).(sf:DockingManager.CanClose), RelativeSource={RelativeSource TemplatedParent}}" Value="False"/>
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="PART_CloseButton" Property="UIElement.Visibility" Value="Collapsed"/>
                        <Setter TargetName="PART_ContextMenu" Property="sf:CustomContextMenu.IsEnabledHiddenMenuItem"
                   Value="false"/>
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding Path=(sf:DockingManager.InternalDataContext).(sf:DockedElementTabbedHost.ShowTabs), RelativeSource={RelativeSource TemplatedParent}}" Value="True"/>
                            <Condition Binding="{Binding Path=(sf:DockingManager.DockingManager).(sf:DockingManager.CloseTabs), RelativeSource={RelativeSource TemplatedParent}}" Value="CloseActive"/>
                            <Condition Binding="{Binding Path=(sf:DockingManager.InternalDataContext).(sf:DockingManager.CanClose), RelativeSource={RelativeSource TemplatedParent}}" Value="False"/>
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="PART_CloseButton" Property="UIElement.Visibility" Value="Collapsed"/>
                        <Setter TargetName="PART_ContextMenu" Property="sf:CustomContextMenu.IsEnabledHiddenMenuItem"
                   Value="false"/>
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding Path=(sf:DockingManager.InternalDataContext).(sf:DockedElementTabbedHost.ShowTabs), RelativeSource={RelativeSource TemplatedParent}}" Value="True"/>
                            <Condition Binding="{Binding Path=(sf:DockingManager.DockingManager).(sf:DockingManager.CloseTabs), RelativeSource={RelativeSource TemplatedParent}}" Value="CloseAll"/>
                            <Condition Binding="{Binding Path=CanCloseGroup, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type sf:DockedElementTabbedHost}}}" Value="False"/>
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="PART_CloseButton" Property="UIElement.Visibility" Value="Collapsed"/>
                        <Setter TargetName="PART_ContextMenu" Property="sf:CustomContextMenu.IsEnabledHiddenMenuItem" Value="false"/>
                    </MultiDataTrigger>

                    <DataTrigger Value="False" Binding="{Binding Path=AutoHideVisibility, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type sf:DockingManager}}}">
                        <Setter TargetName="PART_AwlButton" Property="UIElement.Visibility" Value="Collapsed"/>
                        <Setter TargetName="PART_ContextMenu" Property="sf:CustomContextMenu.IsEnabledAutoHideMenuItem" Value="false"/>
                    </DataTrigger>

                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True"/>
                            <Condition Binding="{Binding Path=(sf:DockingManager.DockingManager).(sf:DockingManager.IsDragging), RelativeSource={RelativeSource TemplatedParent}}" Value="True"/>
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="CoverletControl" Property="UIElement.Visibility" Value="Visible"/>
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding Path=(sf:DockingManager.InternalDataContext).(sf:DockedElementTabbedHost.ShowTabs), RelativeSource={RelativeSource TemplatedParent}}" Value="False"/>
                            <Condition Binding="{Binding Path=(sf:DockingManager.DockingManager).(sf:DockingManager.CanAutoHide), RelativeSource={RelativeSource TemplatedParent}}"
                        Value="False"/>
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="PART_AwlButton" Property="UIElement.Visibility" Value="Collapsed"/>
                        <Setter TargetName="PART_ContextMenu" Property="sf:CustomContextMenu.IsEnabledAutoHideMenuItem"
                   Value="false"/>
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding Path=(sf:DockingManager.InternalDataContext).(sf:DockedElementTabbedHost.ShowTabs), RelativeSource={RelativeSource TemplatedParent}}" Value="True"/>
                            <Condition Binding="{Binding Path=(sf:DockingManager.DockingManager).(sf:DockingManager.CanAutoHide), RelativeSource={RelativeSource TemplatedParent}}" Value="False"/>
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="PART_AwlButton" Property="UIElement.Visibility" Value="Collapsed"/>
                        <Setter TargetName="PART_ContextMenu" Property="sf:CustomContextMenu.IsEnabledAutoHideMenuItem"
                   Value="false"/>
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding Path=(sf:DockingManager.InternalDataContext).(sf:DockedElementTabbedHost.ShowTabs), RelativeSource={RelativeSource TemplatedParent}}" Value="True"/>
                            <Condition Binding="{Binding Path=AutoHideTabsMode, RelativeSource={RelativeSource AncestorType={x:Type sf:DockingManager}}}" Value="AutoHideGroup"/>
                            <Condition Binding="{Binding Path=CanAutoHideGroup, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type sf:DockedElementTabbedHost}}}" Value="False"/>
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="PART_AwlButton" Property="UIElement.Visibility" Value="Collapsed"/>
                        <Setter TargetName="PART_ContextMenu" Property="sf:CustomContextMenu.IsEnabledHiddenMenuItem"
                   Value="false"/>
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding Path=(sf:DockingManager.InternalDataContext).(sf:DockedElementTabbedHost.ShowTabs), RelativeSource={RelativeSource TemplatedParent}}" Value="False"/>
                            <Condition Binding="{Binding Path=(sf:DockingManager.DockingManager).(sf:DockingManager.CanAutoHide), RelativeSource={RelativeSource TemplatedParent}}" Value="False"/>
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="PART_AwlButton" Property="UIElement.Visibility" Value="Collapsed"/>
                        <Setter TargetName="PART_ContextMenu" Property="sf:CustomContextMenu.IsEnabledAutoHideMenuItem"
                   Value="false"/>
                    </MultiDataTrigger>
                    <Trigger Property="UIElement.Visibility" Value="Collapsed">
                        <Setter TargetName="PART_ContentPresenter" Value="{x:Null}" Property="ContentPresenter.Content"/>
                    </Trigger>
                    <Trigger SourceName="borderTop" Property="UIElement.Visibility" Value="Visible">
                        <Setter TargetName="PART_ContentPresenter" Value="{Binding Path=(sf:DockingManager.DockingManager).(sf:DockingManager.HeaderForeground), RelativeSource={RelativeSource TemplatedParent}}" Property="TextBlock.Foreground"/>
                        <Setter TargetName="MenuIconButton" Property="Background" Value="{Binding Path=(sf:DockingManager.InternalDataContext).(sdc:AuroraProperties.TitleBarSettings).InactiveIconBackground, RelativeSource={RelativeSource TemplatedParent}}"/>
                        <Setter TargetName="MenuIconButton" Property="Foreground" Value="{Binding Path=(sf:DockingManager.InternalDataContext).(sdc:AuroraProperties.TitleBarSettings).InactiveIconForeground, RelativeSource={RelativeSource TemplatedParent}}"/>
                        <Setter TargetName="PART_ContentPresenter" Value="{Binding  RelativeSource={RelativeSource TemplatedParent}, Path=(sf:DockingManager.InternalDataContext).(sdc:AuroraProperties.TitleBarSettings).InactiveForeground}" Property="TextBlock.Foreground"/>
                        <Setter TargetName="borderTop" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(sf:DockingManager.InternalDataContext).(sdc:AuroraProperties.TitleBarSettings).InactiveBackground}" Property="Border.Background"/>
                        <Setter TargetName="borderTop" Value="{Binding Path=(sf:DockingManager.DockingManager).(sf:DockingManager.HeaderBorderBrush), RelativeSource={RelativeSource TemplatedParent}}" Property="Border.BorderBrush"/>
                        <Setter TargetName="borderTop" Value="{Binding Path=(sf:DockingManager.DockingManager).(sf:DockingManager.HeaderBorderThickness), RelativeSource={RelativeSource TemplatedParent}}" Property="Border.BorderThickness"/>
                        <Setter TargetName="PART_AwlButton" Value="{Binding Path=(sf:DockingManager.DockingManager).(sf:DockingManager.HeaderForeground), RelativeSource={RelativeSource TemplatedParent}}" Property="Control.Foreground"/>
                        <Setter TargetName="PART_ContextMenuButton" Value="{Binding Path=(sf:DockingManager.DockingManager).(sf:DockingManager.HeaderForeground), RelativeSource={RelativeSource TemplatedParent}}" Property="Control.Foreground"/>
                        <Setter TargetName="PART_CloseButton" Value="{Binding Path=(sf:DockingManager.DockingManager).(sf:DockingManager.HeaderForeground), RelativeSource={RelativeSource TemplatedParent}}" Property="Control.Foreground"/>
                    </Trigger>
                    <DataTrigger Value="True" Binding="{Binding Path=IsTemplateParenKeyboardFocusWithin, RelativeSource={RelativeSource Self}}">
                        <Setter TargetName="MenuIconButton" Property="Background" Value="{Binding Path=(sf:DockingManager.InternalDataContext).(sdc:AuroraProperties.TitleBarSettings).ActiveIconBackground, RelativeSource={RelativeSource TemplatedParent}}"/>
                        <Setter TargetName="MenuIconButton" Property="Foreground" Value="{Binding Path=(sf:DockingManager.InternalDataContext).(sdc:AuroraProperties.TitleBarSettings).ActiveIconForeground, RelativeSource={RelativeSource TemplatedParent}}"/>
                        <Setter TargetName="PART_ContentPresenter" Value="{Binding  RelativeSource={RelativeSource TemplatedParent}, Path=(sf:DockingManager.InternalDataContext).(sdc:AuroraProperties.TitleBarSettings).ActiveForeground}" Property="TextBlock.Foreground"/>
                        <Setter TargetName="borderTop" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(sf:DockingManager.InternalDataContext).(sdc:AuroraProperties.TitleBarSettings).ActiveBackground}" Property="Border.Background"/>
                        <Setter TargetName="PART_AwlButton" Value="{Binding Path=(sf:DockingManager.DockingManager).(sf:DockingManager.HeaderForegroundSelected), RelativeSource={RelativeSource TemplatedParent}}" Property="Control.Foreground"/>
                        <Setter TargetName="PART_ContextMenuButton" Value="{Binding Path=(sf:DockingManager.DockingManager).(sf:DockingManager.HeaderForegroundSelected), RelativeSource={RelativeSource TemplatedParent}}"  Property="Control.Foreground"/>
                        <Setter TargetName="PART_CloseButton" Value="{Binding Path=(sf:DockingManager.DockingManager).(sf:DockingManager.HeaderForegroundSelected), RelativeSource={RelativeSource TemplatedParent}}" Property="Control.Foreground"/>
                    </DataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True"/>
                            <Condition Binding="{Binding Path=(sf:DockingManager.DockingManager).(sf:DockingManager.EnableMouseHoverBackground), RelativeSource={RelativeSource TemplatedParent}}" Value="True"/>
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="MenuIconButton" Property="Background" Value="{Binding Path=(sf:DockingManager.InternalDataContext).(sdc:AuroraProperties.TitleBarSettings).ActiveIconBackground, RelativeSource={RelativeSource TemplatedParent}}"/>
                        <Setter TargetName="MenuIconButton" Property="Foreground" Value="{Binding Path=(sf:DockingManager.InternalDataContext).(sdc:AuroraProperties.TitleBarSettings).ActiveIconForeground, RelativeSource={RelativeSource TemplatedParent}}"/>
                        <Setter TargetName="PART_ContentPresenter" Value="{Binding  RelativeSource={RelativeSource TemplatedParent}, Path=(sf:DockingManager.InternalDataContext).(sdc:AuroraProperties.TitleBarSettings).ActiveForeground}" Property="TextBlock.Foreground"/>
                        <Setter TargetName="borderTop" Value="{Binding  RelativeSource={RelativeSource TemplatedParent}, Path=(sf:DockingManager.InternalDataContext).(sdc:AuroraProperties.TitleBarSettings).ActiveBackground}" Property="Border.Background"/>
                    </MultiDataTrigger>
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding Path=IsMouseOver, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type sf:DockedElementTabbedHost}}}" Value="True"/>
                            <Condition Binding="{Binding Path=(sf:DockingManager.DockingManager).(sf:DockingManager.IsEnableHotTracking), RelativeSource={RelativeSource TemplatedParent}}" Value="True"/>
                        </MultiDataTrigger.Conditions>
                        <Setter TargetName="MenuIconButton" Property="Background" Value="{Binding Path=(sf:DockingManager.InternalDataContext).(sdc:AuroraProperties.TitleBarSettings).ActiveIconBackground, RelativeSource={RelativeSource TemplatedParent}}"/>
                        <Setter TargetName="MenuIconButton" Property="Foreground" Value="{Binding Path=(sf:DockingManager.InternalDataContext).(sdc:AuroraProperties.TitleBarSettings).ActiveIconForeground, RelativeSource={RelativeSource TemplatedParent}}"/>
                        <Setter TargetName="PART_ContentPresenter" Value="{Binding  RelativeSource={RelativeSource TemplatedParent}, Path=(sf:DockingManager.InternalDataContext).(sdc:AuroraProperties.TitleBarSettings).ActiveForeground}" Property="TextBlock.Foreground"/>
                        <Setter TargetName="borderTop" Value="{Binding  RelativeSource={RelativeSource TemplatedParent}, Path=(sf:DockingManager.InternalDataContext).(sdc:AuroraProperties.TitleBarSettings).ActiveBackground}" Property="Border.Background"/>
                    </MultiDataTrigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>

            <Style x:Key="NativeFloatwindowHeader" TargetType="{x:Type ContentControl}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ContentControl}">
                            <DockPanel Name="MiddleHdrImg" LastChildFill="True">
                                <Grid DockPanel.Dock="Right">
                                    <Rectangle Fill="{Binding  Path=(sf:DockingManager.InternalDataContext).(sf:DockedElementTabbedHost.HostedElement).(sdc:AuroraProperties.TitleBarSettings).ButtonAreaBackground, RelativeSource={RelativeSource AncestorType=sf:NativeFloatWindow}}"/>
                                    <StackPanel DockPanel.Dock="Right" Orientation="Horizontal">
                                        <ItemsControl ItemsSource="{Binding  Path=(sf:DockingManager.InternalDataContext).(sf:DockedElementTabbedHost.HostedElement).(sdc:AuroraProperties.TitleBarSettings).TitleBarControls, RelativeSource={RelativeSource AncestorType=sf:NativeFloatWindow}}">
                                            <ItemsControl.ItemsPanel>
                                                <ItemsPanelTemplate>
                                                    <StackPanel Orientation="Horizontal"/>
                                                </ItemsPanelTemplate>
                                            </ItemsControl.ItemsPanel>
                                        </ItemsControl>

                                        <ToggleButton  Click="MinimizedButtonClicked"	
                                                       sf:WindowChrome.IsHitTestVisibleInChrome="True"  
                                                        Template="{Binding Path=(sf:NativeFloatWindow.DockingManager).(sf:DockingManager.MinimizeButtonTemplate),RelativeSource={RelativeSource AncestorType=sf:NativeFloatWindow}}"
                                                        Margin="4,4,0,0"></ToggleButton>
                                        <ToggleButton   x:Name="Restorebutton" Focusable="False" sf:WindowChrome.IsHitTestVisibleInChrome="True"  Margin="2,4,0,0" Padding="0" 
                                                       Command="sf:NativeFloatWindow.RestoreCommand"	
                                                       Template="{Binding Path=(sf:NativeFloatWindow.DockingManager).(sf:DockingManager.RestoreButtonTemplate),RelativeSource={RelativeSource AncestorType=sf:NativeFloatWindow}}" />
                                        <ToggleButton   x:Name="MaximizeButton" Focusable="False" sf:WindowChrome.IsHitTestVisibleInChrome="True" Margin="2,4,0,0" Padding="0" 
                                                        Command="sf:NativeFloatWindow.MaximizeCommand"	
                                                        Template="{Binding Path=(sf:NativeFloatWindow.DockingManager).(sf:DockingManager.MaximizeButtonTemplate),RelativeSource={RelativeSource AncestorType=sf:NativeFloatWindow}}"/>
                                        <ToggleButton Name="button" Focusable="False" sf:WindowChrome.IsHitTestVisibleInChrome="True" Margin="2,2,0,0" Padding="0" 
												Command="sf:NativeFloatWindow.CloseCommand"	Template="{Binding Path=(sf:NativeFloatWindow.DockingManager).(sf:DockingManager.CloseButtonTemplate),RelativeSource={RelativeSource AncestorType=sf:NativeFloatWindow}}"/>
                                    </StackPanel>
                                </Grid>

                                <sf:MenuAdv DockPanel.Dock="Left" sf:WindowChrome.IsHitTestVisibleInChrome="True" sf:SkinStorage.VisualStyle="Metro" BorderThickness="0" Margin="0" Padding="0">
                                    <sf:MenuItemAdv BorderThickness="0" 
                                                x:Name="MenuIconButton"
                                                Header="{Binding Path=(sf:DockingManager.InternalDataContext).(sf:DockedElementTabbedHost.HostedElement).(sdc:AuroraProperties.TitleBarSettings).IconContent, RelativeSource={RelativeSource AncestorType=sf:NativeFloatWindow}}"
                                                Padding="0" Margin="-5,0,0,0" VerticalAlignment="Stretch"
                                                ItemsSource="{Binding Path=(sf:DockingManager.InternalDataContext).(sf:DockedElementTabbedHost.HostedElement).(sdc:AuroraProperties.TitleBarSettings).MenuItems, RelativeSource={RelativeSource AncestorType=sf:NativeFloatWindow}}"
                                                    HeaderTemplate="{StaticResource ViewMenuIcon}">
                                    </sf:MenuItemAdv>
                                </sf:MenuAdv>

                                <ContentControl Name="contentWrapper" Margin="0, 0, 0, 0"
                                                    VerticalContentAlignment="Center"
                                                    VerticalAlignment="Center"
                                                    MaxHeight="23"
                                                    sf:WindowChrome.IsHitTestVisibleInChrome="False"
                                                    Content="{Binding Path=(sf:DockingManager.InternalDataContext).(sf:DockedElementTabbedHost.HostedElement).(sdc:AuroraProperties.TitleBarSettings).HeaderContent, RelativeSource={RelativeSource AncestorType=sf:NativeFloatWindow}}"
                                                    ContentTemplate="{Binding Path=(sf:DockingManager.InternalDataContext).(sf:DockedElementTabbedHost.HostedElement).(sdc:AuroraProperties.TitleBarSettings).HeaderTemplate, RelativeSource={RelativeSource AncestorType=sf:NativeFloatWindow}}"/>
                            </DockPanel>
                            <ControlTemplate.Triggers>
                                <DataTrigger Binding="{Binding Path=(sf:NativeFloatWindow.DockingManager).(sf:DockingManager.IsTouchEnabled),RelativeSource={RelativeSource AncestorType=sf:NativeFloatWindow}}" Value="True">
                                    <Setter Property="FontSize" Value="18"/>
                                </DataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding Path=(sf:NativeFloatWindow.MaximizeButtonEnabled),RelativeSource={RelativeSource FindAncestor,AncestorType={x:Type sf:NativeFloatWindow}}}" Value="True" />
                                        <Condition Binding="{Binding Path=(sf:NativeFloatWindow.WindowState),RelativeSource={RelativeSource FindAncestor,AncestorType={x:Type sf:NativeFloatWindow}}}" Value="Maximized" />
                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="MaximizeButton" Property="Visibility" Value="Collapsed"/>
                                    <Setter TargetName="Restorebutton" Property="Visibility" Value="Visible" />
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding Path=(sf:NativeFloatWindow.MaximizeButtonEnabled),RelativeSource={RelativeSource FindAncestor,AncestorType={x:Type sf:NativeFloatWindow}}}" Value="True" />
                                        <Condition Binding="{Binding Path=(sf:NativeFloatWindow.WindowState),RelativeSource={RelativeSource FindAncestor,AncestorType={x:Type sf:NativeFloatWindow}}}" Value="Normal" />
                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="MaximizeButton" Property="Visibility" Value="Visible"/>
                                    <Setter TargetName="Restorebutton" Property="Visibility" Value="Collapsed" />
                                </MultiDataTrigger>
                                <DataTrigger Binding="{Binding Path=(sf:NativeFloatWindow.MaximizeButtonEnabled),RelativeSource={RelativeSource FindAncestor,AncestorType={x:Type sf:NativeFloatWindow}}}" Value="False">
                                    <Setter TargetName="MaximizeButton" Property="Visibility" Value="Collapsed" />
                                    <Setter TargetName="Restorebutton" Property="Visibility" Value="Collapsed" />
                                </DataTrigger>

                                <DataTrigger Binding="{Binding Path=IsMultiHostsContainer, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type sf:NativeFloatWindow}}}" Value="True" >
                                    <Setter TargetName="contentWrapper" Property="Visibility" Value="Hidden"/>
                                </DataTrigger>

                                <DataTrigger Binding="{Binding  Path=IsKeyboardFocusWithin, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type sf:NativeFloatWindow}}}" Value="False" >
                                    <Setter TargetName="MiddleHdrImg" Property="Background" Value="{Binding Path=(sf:NativeFloatWindow.DockingManager).(sf:DockingManager.FloatWindowHeaderBackground), RelativeSource={RelativeSource AncestorType={x:Type sf:NativeFloatWindow}}}" />
                                </DataTrigger>

                                <Trigger SourceName="MiddleHdrImg" Property="Visibility" Value="Visible">
                                    <Setter TargetName="MenuIconButton" Property="Background" 
                                        Value="{Binding Path=(sf:DockingManager.InternalDataContext).(sf:DockedElementTabbedHost.HostedElement).(sdc:AuroraProperties.TitleBarSettings).InactiveIconBackground, RelativeSource={RelativeSource AncestorType=sf:NativeFloatWindow}}"/>
                                    <Setter TargetName="MenuIconButton" Property="Foreground" 
                                        Value="{Binding Path=(sf:DockingManager.InternalDataContext).(sf:DockedElementTabbedHost.HostedElement).(sdc:AuroraProperties.TitleBarSettings).InactiveIconForeground, RelativeSource={RelativeSource AncestorType=sf:NativeFloatWindow}}"/>
                                    <Setter TargetName="MiddleHdrImg" Property="Background" 
                                        Value="{Binding Path=(sf:DockingManager.InternalDataContext).(sf:DockedElementTabbedHost.HostedElement).(sdc:AuroraProperties.TitleBarSettings).InactiveBackground, RelativeSource={RelativeSource AncestorType=sf:NativeFloatWindow}}" />
                                    <Setter TargetName="contentWrapper" Property="TextBlock.Foreground" 
                                        Value="{Binding Path=(sf:DockingManager.InternalDataContext).(sf:DockedElementTabbedHost.HostedElement).(sdc:AuroraProperties.TitleBarSettings).InactiveForeground, RelativeSource={RelativeSource AncestorType=sf:NativeFloatWindow}}" />
                                </Trigger>
                                <DataTrigger Binding="{Binding Path=IsKeyboardFocusWithin, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type sf:NativeFloatWindow}}}" Value="True">
                                    <Setter TargetName="MiddleHdrImg" Property="Background" 
                                        Value="{Binding Path=(sf:DockingManager.InternalDataContext).(sf:DockedElementTabbedHost.HostedElement).(sdc:AuroraProperties.TitleBarSettings).ActiveBackground, RelativeSource={RelativeSource AncestorType=sf:NativeFloatWindow}}" />
                                    <Setter TargetName="MenuIconButton" Property="Foreground" 
                                        Value="{Binding Path=(sf:DockingManager.InternalDataContext).(sf:DockedElementTabbedHost.HostedElement).(sdc:AuroraProperties.TitleBarSettings).ActiveIconForeground, RelativeSource={RelativeSource AncestorType=sf:NativeFloatWindow}}"/>
                                    <Setter TargetName="contentWrapper" Property="TextBlock.Foreground" 
                                        Value="{Binding Path=(sf:DockingManager.InternalDataContext).(sf:DockedElementTabbedHost.HostedElement).(sdc:AuroraProperties.TitleBarSettings).ActiveForeground, RelativeSource={RelativeSource AncestorType=sf:NativeFloatWindow}}" />
                                    <Setter TargetName="MenuIconButton" Property="Background" 
                                        Value="{Binding Path=(sf:DockingManager.InternalDataContext).(sf:DockedElementTabbedHost.HostedElement).(sdc:AuroraProperties.TitleBarSettings).ActiveIconBackground, RelativeSource={RelativeSource AncestorType=sf:NativeFloatWindow}}"/>
                                </DataTrigger>

                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="CustomNativeFloatWindowStyle" TargetType="{x:Type sf:NativeFloatWindow}">
                <Setter Property="sf:WindowChrome.WindowChrome">
                    <Setter.Value>
                        <sf:WindowChrome 
                        ResizeBorderThickness="7" CornerRadius="0"  CaptionHeight="20" GlassFrameThickness="0"
                        UseAeroCaptionButtons="True">
                        </sf:WindowChrome>
                    </Setter.Value>
                </Setter>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ContentControl}">
                            <AdornerDecorator>
                                <DockPanel Focusable="False" LastChildFill="True" Name="MainPanel">
                                    <Border Name="FloatWindowOutBorder"  Focusable="False"
                                        BorderBrush="{Binding Path=(sf:DockingManager.InternalDataContext).(sf:DockedElementTabbedHost.HostedElement).(sdc:AuroraProperties.TitleBarSettings).InactiveWindowBorder, RelativeSource={RelativeSource AncestorType=sf:NativeFloatWindow}}"
                                        BorderThickness="{Binding Path=(sf:DockingManager.InternalDataContext).(sf:DockedElementTabbedHost.HostedElement).(sdc:AuroraProperties.TitleBarSettings).InactiveWindowBorderThickness, RelativeSource={RelativeSource AncestorType=sf:NativeFloatWindow}}"  >

                                        <Grid Focusable="False">
                                            <Grid.RowDefinitions>
                                                <RowDefinition Name="TopRow"  Height="Auto" />
                                                <RowDefinition Height="*" />
                                            </Grid.RowDefinitions>

                                            <Border x:Name="Part_BorderMenu"  Grid.Column="0" Grid.Row="0">
                                                <Border.ContextMenu>
                                                    <sf:CustomContextMenu  x:Name="Part_CustomContextMenu" Focusable="false" />
                                                </Border.ContextMenu>
                                            </Border>
                                            <ContentControl Focusable="False" Style="{StaticResource NativeFloatwindowHeader}" Name="BorderHeader"  Grid.Row="0" />
                                            <ContentPresenter Name="ContentPresenter"  Grid.Column="0" Grid.Row="1" ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}" 
                                                              Content="{TemplateBinding ContentControl.Content}"/>
                                        </Grid>
                                    </Border>
                                </DockPanel>
                            </AdornerDecorator>
                            <ControlTemplate.Triggers>
                                <Trigger SourceName="MainPanel" Property="IsKeyboardFocusWithin" Value="True">
                                    <Setter TargetName="FloatWindowOutBorder" Property="BorderBrush" 
                                        Value="{Binding Path=(sf:DockingManager.InternalDataContext).(sf:DockedElementTabbedHost.HostedElement).(sdc:AuroraProperties.TitleBarSettings).ActiveWindowBorder, RelativeSource={RelativeSource AncestorType=sf:NativeFloatWindow}}"/>
                                    <Setter TargetName="FloatWindowOutBorder" Property="BorderThickness" 
                                        Value="{Binding Path=(sf:DockingManager.InternalDataContext).(sf:DockedElementTabbedHost.HostedElement).(sdc:AuroraProperties.TitleBarSettings).ActiveWindowBorderThickness, RelativeSource={RelativeSource AncestorType=sf:NativeFloatWindow}}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="DockHeaderStyle" TargetType="sf:DockHeaderPresenter">
                <Setter Property="Template" Value="{StaticResource DockHeaderPresenterTemplate}"/>
            </Style>

            <Style x:Key="DockedElementTabHostStyle" TargetType="{x:Type sf:DockedElementTabbedHost}" BasedOn="{StaticResource MetroDockedElementTabbedHostStyle}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type sf:DockedElementTabbedHost}">
                            <Border x:Name="BorderWrap" Width="Auto" SnapsToDevicePixels="true" 
                                    Background="Transparent" 
                                    BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(sf:DockingManager.InternalDataContext).(sdc:AuroraProperties.TitleBarSettings).InactiveWindowBorder}"
                                    BorderThickness="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(sf:DockingManager.InternalDataContext).(sdc:AuroraProperties.TitleBarSettings).InactiveWindowBorderThickness}"
                                    FocusVisualStyle="{Binding Path=(sf:DockedElementTabbedHost.DockingManager).(sf:DockingManager.FocusVisualStyle), RelativeSource={RelativeSource AncestorType={x:Type sf:DockedElementTabbedHost}}}">
                                <DockPanel x:Name="DockPanel" Width="Auto" LastChildFill="true" Focusable="false">
                                    <sf:DockHeaderPresenter x:Name="header" DockPanel.Dock="Top" RenderTransformOrigin="0.5,0.5"
                                              IsTemplateParenKeyboardFocusWithin="{TemplateBinding UIElement.IsKeyboardFocusWithin}"
                                              Style="{Binding Path=(sf:DockedElementTabbedHost.DockingManager).(sf:DockingManager.DockHeaderStyle), RelativeSource={RelativeSource AncestorType={x:Type sf:DockedElementTabbedHost}}}"/>
                                    <Grid>
                                        <ContentPresenter Name="HostedElement" ClipToBounds="true" ContentSource="HostedElement"
                                                          ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                                                          ContentTemplateSelector="{TemplateBinding ContentControl.ContentTemplateSelector}"/>
                                        <Border Name="PART_CoverletControl" Visibility="Collapsed" Background="Transparent"/>
                                    </Grid>
                                </DockPanel>
                            </Border>
                            <ControlTemplate.Triggers>
                                <DataTrigger Value="True" Binding="{Binding Path=(sf:DockedElementTabbedHost.HostedElement).(sf:DockingManager.NoHeader), RelativeSource={RelativeSource Self}}">
                                    <Setter TargetName="header" Property="UIElement.Visibility" Value="Collapsed"/>
                                </DataTrigger>
                                <DataTrigger Value="True" Binding="{Binding Path=(sf:DockedElementTabbedHost.DockingManager).(sf:DockingManager.IsDragging), RelativeSource={RelativeSource TemplatedParent}}">
                                    <Setter TargetName="PART_CoverletControl" Property="UIElement.Visibility" Value="Visible"/>
                                </DataTrigger>
                                <Trigger Property="sf:DockedElementTabbedHost.MarkAsFrozen" Value="true">
                                    <Setter TargetName="PART_CoverletControl" Property="UIElement.Visibility" Value="Visible"/>
                                    <Setter TargetName="HostedElement" Property="UIElement.Visibility" Value="Collapsed"/>
                                </Trigger>
                                <Trigger SourceName="BorderWrap" Property="UIElement.Visibility" Value="Visible">
                                    <Setter TargetName="BorderWrap" Value="{Binding Path=(sf:DockedElementTabbedHost.DockingManager).(sf:DockingManager.ElementBorderThickness), RelativeSource={RelativeSource AncestorType={x:Type sf:DockedElementTabbedHost}}}" 
                                            Property="Border.BorderThickness"/>
                                </Trigger>
                                <Trigger Property="IsKeyboardFocusWithin" Value="True">
                                    <Setter TargetName="BorderWrap" Property="BorderBrush" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(sf:DockingManager.InternalDataContext).(sdc:AuroraProperties.TitleBarSettings).ActiveWindowBorder}"/>
                                    <Setter TargetName="BorderWrap" Property="BorderThickness" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(sf:DockingManager.InternalDataContext).(sdc:AuroraProperties.TitleBarSettings).ActiveWindowBorderThickness}"/>
                                </Trigger>
                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=sf:NativeFloatWindow}, Converter={sdc:IsNullConverter}}" Value="False">
                                    <Setter TargetName="BorderWrap" Property="BorderThickness" Value="0"/>
                                </DataTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="DocumentTabItemStyle" TargetType="sf:TabItemExt" BasedOn="{StaticResource MetroTabItemExtStyle}">
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="sf:TabItemExt">
                            <Border Name="Bd" BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=BorderBrush}"
                                    Background="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Content.(ContentPresenter.Content).(sdc:AuroraProperties.TitleBarSettings).InactiveTabBackground}" SnapsToDevicePixels="true" 
                                    BorderThickness="1"
                                    Margin="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Margin}" CornerRadius="0"
                                    ToolTip="{Binding Path=ItemToolTip, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type sf:TabItemExt}}}">
                                <DockPanel x:Name="PART_DockPanel" LastChildFill="true" Margin="0">

                                    <Grid DockPanel.Dock="Right">
                                        <Rectangle Fill="{Binding  Path=Content.(ContentPresenter.Content).(sdc:AuroraProperties.TitleBarSettings).ButtonAreaBackground, RelativeSource={RelativeSource TemplatedParent}}"/>
                                        <StackPanel DockPanel.Dock="Right" Orientation="Horizontal">
                                            <ItemsControl ItemsSource="{Binding  Path=Content.(ContentPresenter.Content).(sdc:AuroraProperties.TitleBarSettings).TitleBarControls, RelativeSource={RelativeSource TemplatedParent}}">
                                                <ItemsControl.ItemsPanel>
                                                    <ItemsPanelTemplate>
                                                        <StackPanel Orientation="Horizontal" Margin="1,2,0,0"/>
                                                    </ItemsPanelTemplate>
                                                </ItemsControl.ItemsPanel>
                                            </ItemsControl>
                                            <ToggleButton Name="PART_CloseButton" Width="15" Height="14" Margin="1,2,3,0" VerticalAlignment="Center"
                                                  DockPanel.Dock="Right" Focusable="false" Visibility="Collapsed"
                                                  Template="{StaticResource MetroCloseButtonTemplate}"
                                                  Command="sf:TabControlCommands.CloseTabItem"/>
                                        </StackPanel>
                                    </Grid>


                                    <ContentControl x:Name="Menu" DockPanel.Dock="Left" Content="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Content.(ContentPresenter.Content).(sdc:AuroraProperties.TitleBarSettings)}"
                                                    ContentTemplate="{StaticResource Menu}"
                                                    sdc:MenuProperties.IsTab="True"
                                                    sdc:MenuProperties.IsActive="False"
                                                    sdc:MenuProperties.IsSelected="{Binding Path=IsSelected, RelativeSource={RelativeSource TemplatedParent}}"/>


                                    <ContentControl x:Name="Content" Content="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Content.(ContentPresenter.Content).(sdc:AuroraProperties.TitleBarSettings).HeaderContent}"
                                                    ContentTemplate="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Content.(ContentPresenter.Content).(sdc:AuroraProperties.TitleBarSettings).HeaderTemplate}"
                                                    Foreground="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Content.(ContentPresenter.Content).(sdc:AuroraProperties.TitleBarSettings).InactiveTabForeground}"
                                                    VerticalAlignment="Center"
                                                    MaxHeight="23"
                                                    Margin="5,0"/>

                                    <ContentPresenter x:Name="PART_EditHeader" ContentSource="Header" Visibility="Collapsed"/>
                                </DockPanel>
                            </Border>
                            <ControlTemplate.Triggers>
                                <DataTrigger Value="True" Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource Self}}">
                                    <Setter TargetName="Bd" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Content.(ContentPresenter.Content).(sdc:AuroraProperties.TitleBarSettings).ActiveBackground}" Property="Border.Background"/>
                                    <Setter TargetName="Bd" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Content.(ContentPresenter.Content).(sdc:AuroraProperties.TitleBarSettings).ActiveWindowBorder}" Property="Border.BorderBrush"/>
                                    <Setter TargetName="Bd" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Content.(ContentPresenter.Content).(sdc:AuroraProperties.TitleBarSettings).ActiveWindowBorderThickness}" Property="Border.BorderThickness"/>
                                    <Setter TargetName="Content" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Content.(ContentPresenter.Content).(sdc:AuroraProperties.TitleBarSettings).ActiveForeground}" Property="Foreground"/>
                                    <Setter TargetName="Menu" Property="sdc:MenuProperties.IsActive" Value="True"/>
                                </DataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding Path=IsMouseOver, ElementName=Bd}" Value="True"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="Bd" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Content.(ContentPresenter.Content).(sdc:AuroraProperties.TitleBarSettings).ActiveBackground}" Property="Border.Background"/>
                                    <Setter TargetName="Bd" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Content.(ContentPresenter.Content).(sdc:AuroraProperties.TitleBarSettings).ActiveWindowBorder}" Property="Border.BorderBrush"/>
                                    <Setter TargetName="Bd" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Content.(ContentPresenter.Content).(sdc:AuroraProperties.TitleBarSettings).ActiveWindowBorderThickness}" Property="Border.BorderThickness"/>
                                    <Setter TargetName="Content" Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=Content.(ContentPresenter.Content).(sdc:AuroraProperties.TitleBarSettings).ActiveForeground}" Property="Foreground"/>
                                    <Setter TargetName="Menu" Property="sdc:MenuProperties.IsActive" Value="True"/>
                                </MultiDataTrigger>
                                <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=sf:TabControlExt}, Path=IsKeyboardFocusWithin}">
                                    <Setter TargetName="Menu" Property="sdc:MenuProperties.IsActive" Value="True"/>
                                </DataTrigger>

                                <DataTrigger Value="Both" Binding="{Binding Path=CloseButtonType, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type sf:TabControlExt}}, FallbackValue=Common}">
                                    <Setter TargetName="PART_CloseButton" Property="UIElement.Visibility" Value="Visible"/>
                                </DataTrigger>
                                <DataTrigger Value="Individual" Binding="{Binding Path=CloseButtonType, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type sf:TabControlExt}}, FallbackValue=Common}">
                                    <Setter TargetName="PART_CloseButton" Property="UIElement.Visibility" Value="Visible"/>
                                </DataTrigger>
                                <DataTrigger Value="IndividualOnMouseOver" Binding="{Binding Path=CloseButtonType, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type sf:TabControlExt}}, FallbackValue=Common}">
                                    <Setter TargetName="PART_CloseButton" Property="UIElement.Visibility" Value="Hidden"/>
                                </DataTrigger>
                                <DataTrigger Value="Extended" Binding="{Binding Path=CloseButtonType, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type sf:TabControlExt}}, FallbackValue=Common}">
                                    <Setter TargetName="PART_CloseButton" Property="UIElement.Visibility" Value="Hidden"/>
                                </DataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding Path=CloseButtonType, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type sf:TabControlExt}}, FallbackValue=Common}" Value="IndividualOnMouseOver"/>
                                        <Condition Binding="{Binding Path=IsMouseOver, ElementName=Bd}" Value="True"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="PART_CloseButton" Property="UIElement.Visibility" Value="Visible"/>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding Path=CloseButtonType, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type sf:TabControlExt}}, FallbackValue=Common}" Value="Extended"/>
                                        <Condition Binding="{Binding Path=IsSelected, RelativeSource={RelativeSource Self}}" Value="True"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="PART_CloseButton" Property="UIElement.Visibility" Value="Visible"/>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding Path=CloseButtonType, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type sf:TabControlExt}}, FallbackValue=Common}" Value="Extended"/>
                                        <Condition Binding="{Binding Path=IsMouseOver, ElementName=Bd}" Value="True"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="PART_CloseButton" Property="UIElement.Visibility" Value="Visible"/>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding Path=TabStripPlacement, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type sf:TabControlExt}}, FallbackValue=Top}" Value="Left"/>
                                        <Condition Binding="{Binding Path=RotateTextWhenVertical, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type sf:TabControlExt}}, FallbackValue=false}" Value="True"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="PART_DockPanel" Property="FrameworkElement.FlowDirection" Value="LeftToRight"/>
                                    <Setter Property="FrameworkElement.LayoutTransform">
                                        <Setter.Value>
                                            <RotateTransform Angle="-90"/>
                                        </Setter.Value>
                                    </Setter>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding Path=TabStripPlacement, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type sf:TabControlExt}}, FallbackValue=Top}" Value="Right"/>
                                        <Condition Binding="{Binding Path=RotateTextWhenVertical, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type sf:TabControlExt}}, FallbackValue=false}" Value="True"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="PART_DockPanel" Property="FrameworkElement.HorizontalAlignment" Value="Center"/>
                                    <Setter TargetName="PART_DockPanel" Property="FrameworkElement.FlowDirection" Value="LeftToRight"/>
                                    <Setter TargetName="PART_DockPanel" Property="FrameworkElement.LayoutTransform">
                                        <Setter.Value>
                                            <RotateTransform Angle="-90"/>
                                        </Setter.Value>
                                    </Setter>
                                </MultiDataTrigger>
                                <DataTrigger Value="Bottom" Binding="{Binding Path=TabStripPlacement, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type sf:TabControlExt}}, FallbackValue=Top}">
                                    <Setter TargetName="Bd" Property="Border.BorderThickness" Value="1,1,1,0"/>
                                    <Setter TargetName="Bd" Property="FrameworkElement.Margin" Value="0"/>
                                    <Setter TargetName="PART_DockPanel" Property="FrameworkElement.VerticalAlignment" Value="Stretch"/>
                                    <Setter TargetName="PART_CloseButton" Property="FrameworkElement.VerticalAlignment" Value="Top"/>
                                    <Setter TargetName="PART_DockPanel" Property="FrameworkElement.Margin" Value="0,0,0,4"/>
                                    <Setter TargetName="PART_DockPanel" Property="FrameworkElement.LayoutTransform">
                                        <Setter.Value>
                                            <RotateTransform Angle="-180"/>
                                        </Setter.Value>
                                    </Setter>
                                </DataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding Path=TabStripPlacement, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type sf:TabControlExt}}, FallbackValue=Top}" Value="Right"/>
                                        <Condition Binding="{Binding Path=RotateTextWhenVertical, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type sf:TabControlExt}}, FallbackValue=false}" Value="False"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter TargetName="Bd" Property="FrameworkElement.Margin" Value="0"/>
                                </MultiDataTrigger>
                                <MultiDataTrigger>
                                    <MultiDataTrigger.Conditions>
                                        <Condition Binding="{Binding Path=TabStripPlacement, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type sf:TabControlExt}}, FallbackValue=Top}" Value="Left"/>
                                        <Condition Binding="{Binding Path=RotateTextWhenVertical, RelativeSource={RelativeSource FindAncestor, AncestorType={x:Type sf:TabControlExt}}, FallbackValue=false}" Value="False"/>
                                    </MultiDataTrigger.Conditions>
                                    <Setter Property="FrameworkElement.FlowDirection" Value="LeftToRight"/>
                                </MultiDataTrigger>
                                <DataTrigger Value="True" Binding="{Binding Path=(sf:TabControlExt.IsEditing), RelativeSource={RelativeSource Self}}">
                                    <Setter TargetName="PART_EditHeader" Property="UIElement.Visibility" Value="Visible"/>
                                    <Setter TargetName="Content" Property="UIElement.Visibility" Value="Collapsed"/>
                                </DataTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <Style x:Key="TabControlStyle" TargetType="{x:Type sf:TabControlExt}">
                <Setter Property="TabPanelStyle" Value="{StaticResource MetroTabPanelAdvStyle}"/>
                <Setter Property="TabPanelBackground" Value="{StaticResource Metro.TabPanelBackgroundBrush}"/>
                <Setter Property="TextElement.Foreground" Value="{StaticResource Metro.InactiveForeground}"/>
                <Setter Property="Panel.Background" Value="{StaticResource TabBackground.Office2003}"/>
                <Setter Property="DragMarkerStyle" Value="{StaticResource MetroDragMarkerStyle}"/>
                <Setter Property="Padding" Value="2"/>
                <Setter Property="AllowDrop" Value="true"/>
                <Style.Triggers>
                    <DataTrigger Binding="{Binding Path=IsDisableUnloadTabItemExtContent, RelativeSource={RelativeSource Self}}" Value="False">
                        <Setter Property="Control.Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type sf:TabControlExt}">
                                    <Border BorderBrush="{DynamicResource MetroBorderBrush}" Margin="0" BorderThickness="2">
                                        <Border Name="btborder" BorderBrush="{StaticResource Metro.TabPanelBottomBackgroundBrush}" CornerRadius="1.5">
                                            <Grid Name="TabControlGrid" Background="{DynamicResource MetroPanelBackgroundBrush}" ClipToBounds="false" SnapsToDevicePixels="true" KeyboardNavigation.TabNavigation="Local">
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition x:Name="ColumnDefinition0"/>
                                                    <ColumnDefinition x:Name="ColumnDefinition1" Width="0"/>
                                                </Grid.ColumnDefinitions>
                                                <Grid.RowDefinitions>
                                                    <RowDefinition x:Name="RowDefinition0" Height="Auto"/>
                                                    <RowDefinition x:Name="RowDefinition1" Height="*"/>
                                                </Grid.RowDefinitions>
                                                <sf:HeaderPanel Name="HeaderPanel" Grid.Column="0" Grid.Row="0" ZIndex="1" Focusable="false" Background="#FF293955" HorizontalAlignment="Left" VerticalAlignment="Top">
                                                    <sf:TabPanelAdv x:Name="PART_TabPanel" Focusable="false" DockPanel.Dock="Right" HorizontalAlignment="Left" VerticalAlignment="Top" Style="{TemplateBinding sf:TabControlExt.TabPanelStyle}">
                                                        <sf:TabLayoutPanel x:Name="PART_TabLayoutPanel" AllowDrop="true" Margin="0,0,0,0" IsItemsHost="true" KeyboardNavigation.TabIndex="1" HorizontalAlignment="Left" VerticalAlignment="Top"/>
                                                    </sf:TabPanelAdv>
                                                </sf:HeaderPanel>
                                                <sf:Border3D x:Name="ContentPanel" Grid.Column="0" Grid.Row="1" AllowDrop="true" 
                                                             Margin="0,0,0,0" CornerRadius="0" 
                                                             BorderThickness="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(sf:DocumentTabControl.SelectedContent).(ContentPresenter.Content).(sdc:AuroraProperties.TitleBarSettings).InactiveWindowBorderThickness}"
                                                             BorderBrush="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(sf:DocumentTabControl.SelectedContent).(ContentPresenter.Content).(sdc:AuroraProperties.TitleBarSettings).InactiveWindowBorder}"
                                                             KeyboardNavigation.TabIndex="2" KeyboardNavigation.TabNavigation="Local"
                                                             KeyboardNavigation.DirectionalNavigation="Contained">
                                                    <Border x:Name="PART_ContentPanelBorder" CornerRadius="0" Background="{TemplateBinding Control.Background}">
                                                        <Border x:Name="PART_ContentPanelInnerBorder" BorderThickness="0" Margin="0" Background="{TemplateBinding Control.Background}" CornerRadius="0">
                                                            <ContentPresenter Name="PART_SelectedContentHost" Content="{TemplateBinding TabControl.SelectedContent}"
                                                                              AllowDrop="true" ContentTemplate="{TemplateBinding TabControl.SelectedContentTemplate}"
                                                                              ContentSource="SelectedContent" HorizontalAlignment="Stretch" VerticalAlignment="Stretch"
                                                                              Margin="{TemplateBinding Control.Padding}"
                                                                              SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                                                        </Border>
                                                    </Border>
                                                </sf:Border3D>
                                            </Grid>
                                        </Border>
                                    </Border>
                                    <ControlTemplate.Triggers>
                                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=(sf:DocumentTabControl.SelectedContent).(ContentPresenter.IsKeyboardFocusWithin), Converter={sdc:LogConverter TP - $type - $value}}" Value="True">
                                            <Setter TargetName="ContentPanel" Property="BorderThickness"
                                                    Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(sf:DocumentTabControl.SelectedContent).(ContentPresenter.Content).(sdc:AuroraProperties.TitleBarSettings).ActiveWindowBorderThickness}"/>
                                            <Setter TargetName="ContentPanel" Property="BorderBrush"
                                                    Value="{Binding RelativeSource={RelativeSource TemplatedParent}, Path=(sf:DocumentTabControl.SelectedContent).(ContentPresenter.Content).(sdc:AuroraProperties.TitleBarSettings).ActiveWindowBorder}"/>
                                        </DataTrigger>
                                        <Trigger Property="TabControl.TabStripPlacement" Value="Bottom">
                                            <Setter TargetName="HeaderPanel" Property="FrameworkElement.LayoutTransform">
                                                <Setter.Value>
                                                    <RotateTransform Angle="-180"/>
                                                </Setter.Value>
                                            </Setter>
                                            <Setter TargetName="HeaderPanel" Property="Grid.Row" Value="1"/>
                                            <Setter TargetName="ContentPanel" Property="Grid.Row" Value="0"/>
                                            <Setter TargetName="RowDefinition0" Property="RowDefinition.Height" Value="*"/>
                                            <Setter TargetName="RowDefinition1" Property="RowDefinition.Height" Value="Auto"/>
                                            <Setter TargetName="HeaderPanel" Property="FrameworkElement.FlowDirection" Value="RightToLeft"/>
                                        </Trigger>
                                        <Trigger Property="TabControl.TabStripPlacement" Value="Left">
                                            <Setter TargetName="HeaderPanel" Property="FrameworkElement.LayoutTransform">
                                                <Setter.Value>
                                                    <RotateTransform Angle="-90"/>
                                                </Setter.Value>
                                            </Setter>
                                            <Setter TargetName="HeaderPanel" Property="Grid.Row" Value="0"/>
                                            <Setter TargetName="ContentPanel" Property="Grid.Row" Value="0"/>
                                            <Setter TargetName="HeaderPanel" Property="Grid.Column" Value="0"/>
                                            <Setter TargetName="ContentPanel" Property="Grid.Column" Value="1"/>
                                            <Setter TargetName="ColumnDefinition0" Property="ColumnDefinition.Width" Value="Auto"/>
                                            <Setter TargetName="ColumnDefinition1" Property="ColumnDefinition.Width" Value="*"/>
                                            <Setter TargetName="RowDefinition0" Property="RowDefinition.Height" Value="*"/>
                                            <Setter TargetName="RowDefinition1" Property="RowDefinition.Height" Value="0"/>
                                            <Setter TargetName="HeaderPanel" Property="FrameworkElement.VerticalAlignment" Value="Bottom"/>
                                            <Setter TargetName="HeaderPanel" Property="FrameworkElement.FlowDirection" Value="RightToLeft"/>
                                        </Trigger>
                                        <Trigger Property="TabControl.TabStripPlacement" Value="Right">
                                            <Setter TargetName="HeaderPanel" Property="FrameworkElement.LayoutTransform">
                                                <Setter.Value>
                                                    <RotateTransform Angle="90"/>
                                                </Setter.Value>
                                            </Setter>
                                            <Setter TargetName="HeaderPanel" Property="Grid.Row" Value="0"/>
                                            <Setter TargetName="ContentPanel" Property="Grid.Row" Value="0"/>
                                            <Setter TargetName="HeaderPanel" Property="Grid.Column" Value="1"/>
                                            <Setter TargetName="ContentPanel" Property="Grid.Column" Value="0"/>
                                            <Setter TargetName="ColumnDefinition0" Property="ColumnDefinition.Width" Value="*"/>
                                            <Setter TargetName="ColumnDefinition1" Property="ColumnDefinition.Width" Value="Auto"/>
                                            <Setter TargetName="RowDefinition0" Property="RowDefinition.Height" Value="*"/>
                                            <Setter TargetName="RowDefinition1" Property="RowDefinition.Height" Value="0"/>
                                        </Trigger>
                                        <MultiTrigger>
                                            <MultiTrigger.Conditions>
                                                <Condition Property="TabControl.TabStripPlacement" Value="Left"/>
                                                <Condition Property="sf:TabControlExt.RotateTextWhenVertical" Value="true"/>
                                                <Condition Property="FrameworkElement.FlowDirection" Value="RightToLeft"/>
                                            </MultiTrigger.Conditions>
                                            <Setter TargetName="HeaderPanel" Property="FrameworkElement.FlowDirection" Value="LeftToRight"/>
                                        </MultiTrigger>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding Path=IsAllTabsClosed, RelativeSource={RelativeSource Self}}" Value="True"/>
                                                <Condition Binding="{Binding Path=(sf:SkinStorage.VisualStyle), RelativeSource={RelativeSource Self}}" Value="Office2003"/>
                                            </MultiDataTrigger.Conditions>
                                            <Setter TargetName="PART_TabPanel" Property="Control.Background" Value="Transparent"/>
                                        </MultiDataTrigger>
                                        <Trigger Property="UIElement.IsEnabled" Value="false">
                                            <Setter Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Property="TextElement.Foreground"/>
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </DataTrigger>
                    <DataTrigger Binding="{Binding Path=IsDisableUnloadTabItemExtContent, RelativeSource={RelativeSource Self}}" Value="True">
                        <Setter Property="Control.Template">
                            <Setter.Value>
                                <ControlTemplate TargetType="{x:Type sf:TabControlExt}">
                                    <Border BorderBrush="{DynamicResource MetroBorderBrush}" Background="Red" Margin="0" BorderThickness="2">
                                        <Border Name="btborder" BorderBrush="{StaticResource Metro.TabPanelBottomBackgroundBrush}" Background="Green" CornerRadius="1.5">
                                            <Grid Name="TabControlGrid" Background="{DynamicResource MetroPanelBackgroundBrush}" ClipToBounds="false" SnapsToDevicePixels="true" KeyboardNavigation.TabNavigation="Local">
                                                <Grid.ColumnDefinitions>
                                                    <ColumnDefinition x:Name="ColumnDefinition0"/>
                                                    <ColumnDefinition x:Name="ColumnDefinition1" Width="0"/>
                                                </Grid.ColumnDefinitions>
                                                <Grid.RowDefinitions>
                                                    <RowDefinition x:Name="RowDefinition0" Height="Auto"/>
                                                    <RowDefinition x:Name="RowDefinition1" Height="*"/>
                                                </Grid.RowDefinitions>
                                                <sf:HeaderPanel Name="HeaderPanel" Grid.Column="0" Grid.Row="0" ZIndex="1" Focusable="false" Background="{TemplateBinding sf:TabControlExt.TabPanelBackground}"
                                                                HorizontalAlignment="Left" VerticalAlignment="Top">
                                                    <sf:TabPanelAdv x:Name="PART_TabPanel" Focusable="false" DockPanel.Dock="Right" HorizontalAlignment="Left" 
                                                                    VerticalAlignment="Top" Style="{TemplateBinding sf:TabControlExt.TabPanelStyle}">
                                                        <sf:TabLayoutPanel x:Name="PART_TabLayoutPanel" AllowDrop="true" Margin="0,0,2,0" IsItemsHost="true"
                                                                           KeyboardNavigation.TabIndex="1" HorizontalAlignment="Left" VerticalAlignment="Top"/>
                                                    </sf:TabPanelAdv>
                                                </sf:HeaderPanel>
                                                <sf:Border3D Name="ContentPanel" Grid.Column="0" Grid.Row="1" AllowDrop="true" 
                                                            BorderThickness="1"
                                                            BorderBrush="Red" 
                                                             CornerRadius="0" KeyboardNavigation.TabIndex="2" KeyboardNavigation.TabNavigation="Local"
                                                             KeyboardNavigation.DirectionalNavigation="Contained">
                                                    <Border x:Name="PART_ContentPanelBorder" CornerRadius="0">
                                                        <Border x:Name="PART_ContentPanelInnerBorder" BorderThickness="0" Margin="0"
                                                                Background="{TemplateBinding Control.Background}" CornerRadius="0">
                                                            <Grid x:Name="PART_ContentHolder" Margin="{TemplateBinding Control.Padding}" AllowDrop="true"
                                                                  SnapsToDevicePixels="{TemplateBinding UIElement.SnapsToDevicePixels}"/>
                                                        </Border>
                                                    </Border>
                                                </sf:Border3D>
                                            </Grid>
                                        </Border>
                                    </Border>
                                    <ControlTemplate.Triggers>
                                        <Trigger Property="TabControl.TabStripPlacement" Value="Bottom">
                                            <Setter TargetName="HeaderPanel" Property="FrameworkElement.LayoutTransform">
                                                <Setter.Value>
                                                    <RotateTransform Angle="-180"/>
                                                </Setter.Value>
                                            </Setter>
                                            <Setter TargetName="HeaderPanel" Property="Grid.Row" Value="1"/>
                                            <Setter TargetName="ContentPanel" Property="Grid.Row" Value="0"/>
                                            <Setter TargetName="RowDefinition0" Property="RowDefinition.Height" Value="*"/>
                                            <Setter TargetName="RowDefinition1" Property="RowDefinition.Height" Value="Auto"/>
                                            <Setter TargetName="HeaderPanel" Property="FrameworkElement.FlowDirection" Value="RightToLeft"/>
                                        </Trigger>
                                        <Trigger Property="TabControl.TabStripPlacement" Value="Left">
                                            <Setter TargetName="HeaderPanel" Property="FrameworkElement.LayoutTransform">
                                                <Setter.Value>
                                                    <RotateTransform Angle="-90"/>
                                                </Setter.Value>
                                            </Setter>
                                            <Setter TargetName="HeaderPanel" Property="Grid.Row" Value="0"/>
                                            <Setter TargetName="ContentPanel" Property="Grid.Row" Value="0"/>
                                            <Setter TargetName="HeaderPanel" Property="Grid.Column" Value="0"/>
                                            <Setter TargetName="ContentPanel" Property="Grid.Column" Value="1"/>
                                            <Setter TargetName="ColumnDefinition0" Property="ColumnDefinition.Width" Value="Auto"/>
                                            <Setter TargetName="ColumnDefinition1" Property="ColumnDefinition.Width" Value="*"/>
                                            <Setter TargetName="RowDefinition0" Property="RowDefinition.Height" Value="*"/>
                                            <Setter TargetName="RowDefinition1" Property="RowDefinition.Height" Value="0"/>
                                            <Setter TargetName="HeaderPanel" Property="FrameworkElement.VerticalAlignment" Value="Bottom"/>
                                            <Setter TargetName="HeaderPanel" Property="FrameworkElement.FlowDirection" Value="RightToLeft"/>
                                        </Trigger>
                                        <Trigger Property="TabControl.TabStripPlacement" Value="Right">
                                            <Setter TargetName="HeaderPanel" Property="FrameworkElement.LayoutTransform">
                                                <Setter.Value>
                                                    <RotateTransform Angle="90"/>
                                                </Setter.Value>
                                            </Setter>
                                            <Setter TargetName="HeaderPanel" Property="Grid.Row" Value="0"/>
                                            <Setter TargetName="ContentPanel" Property="Grid.Row" Value="0"/>
                                            <Setter TargetName="HeaderPanel" Property="Grid.Column" Value="1"/>
                                            <Setter TargetName="ContentPanel" Property="Grid.Column" Value="0"/>
                                            <Setter TargetName="ColumnDefinition0" Property="ColumnDefinition.Width" Value="*"/>
                                            <Setter TargetName="ColumnDefinition1" Property="ColumnDefinition.Width" Value="Auto"/>
                                            <Setter TargetName="RowDefinition0" Property="RowDefinition.Height" Value="*"/>
                                            <Setter TargetName="RowDefinition1" Property="RowDefinition.Height" Value="0"/>
                                        </Trigger>
                                        <MultiTrigger>
                                            <MultiTrigger.Conditions>
                                                <Condition Property="TabControl.TabStripPlacement" Value="Left"/>
                                                <Condition Property="sf:TabControlExt.RotateTextWhenVertical" Value="true"/>
                                                <Condition Property="FrameworkElement.FlowDirection" Value="RightToLeft"/>
                                            </MultiTrigger.Conditions>
                                            <Setter TargetName="HeaderPanel" Property="FrameworkElement.FlowDirection" Value="LeftToRight"/>
                                        </MultiTrigger>
                                        <MultiDataTrigger>
                                            <MultiDataTrigger.Conditions>
                                                <Condition Binding="{Binding Path=IsAllTabsClosed, RelativeSource={RelativeSource Self}}" Value="True"/>
                                                <Condition Binding="{Binding Path=(sf:SkinStorage.VisualStyle), RelativeSource={RelativeSource Self}}" Value="Office2003"/>
                                            </MultiDataTrigger.Conditions>
                                            <Setter TargetName="PART_TabPanel" Property="Control.Background" Value="Transparent"/>
                                        </MultiDataTrigger>
                                        <Trigger Property="UIElement.IsEnabled" Value="false">
                                            <Setter Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Property="TextElement.Foreground"/>
                                        </Trigger>
                                    </ControlTemplate.Triggers>
                                </ControlTemplate>
                            </Setter.Value>
                        </Setter>
                    </DataTrigger>
                </Style.Triggers>
            </Style>


        </ResourceDictionary>
    </UserControl.Resources>
    <sf:DockingManager regions:RegionManager.RegionManager="{Binding Path=RegionManager}" 
                regions:RegionManager.RegionName="{x:Static sdc:DockingContainerRegion.Default}"
                DisabledCloseButtonsBehavior="Hide" 
                DocumentCloseButtonType="Individual" IsVS2010DraggingEnabled="True" 
                ShowFloatWindowInTaskbar="True" CanResizeInFloatState="True" 
                DockTabAlignment="Top" UseNativeFloatWindow="True"  UseDocumentContainer="True"  
                IsTDIDragDropEnabled="True"
                NativeWindowStyle="{StaticResource CustomNativeFloatWindowStyle}"
                DockHeaderStyle="{StaticResource DockHeaderStyle}"
                DockedElementTabbedHostStyle="{StaticResource DockedElementTabHostStyle}"
                DocumentTabItemStyle="{StaticResource DocumentTabItemStyle}"
                DocumentTabControlStyle="{StaticResource TabControlStyle}"
                sf:SkinStorage.VisualStyle="Metro"/>

</UserControl>